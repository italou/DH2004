//==============================================================================================================
// Lever Rifle
//==============================================================================================================

//general item variables
General {

  Name     = LeverRifle;
  Type     = Weapon;
  Useable  = TRUE;

  //multiplayer item category
  MultiplayerCategory = Rifles;

  Helper = @Weapon;
  Model  = Data\Weapons\Common\Models\LeverRifle.j3d;

  AnimFolder = Data\Weapons\LeverRifle\Anim;

  Preloads = Data\Weapons\Common\Sounds\DryShot.wav,
             Data\Weapons\Common\Sounds\LeverCock.wav,
             Data\Weapons\Common\Sounds\InsertBullet.wav,
             Data\Weapons\Common\Models\Support.j3d,
             Data\Weapons\Common\ShootFX\RifleSmoke.par;

  //minimum time between two uses of this item, in seconds
  UseLatency = 0.5;

  //how is the field-of-view when aiming this item
  AimFOV = 45;

  //shot many seconds to start/stop aiming this item
  AimSecs = 0.75;

  //adjust arms when aiming item variables
  AdjustWhenAimingBothArmsAmount = 0.88;
  AdjustWhenAimingRightArmAmount = 0.55;
  AdjustWhenAimingLeftArmAmount  = 1;

  //shake strengh
  ShakeStrength = 12;

  //scope class for compatible scopes/items
  ScopeClass = RifleScope;

  //add the items icons
  Icons = Data\Weapons\Common\Icons\LeverRifle_glow.tex,
          Data\Weapons\Common\Icons\LeverRifle.tex,
          Data\Weapons\Common\Icons\LeverRifle_scope_glow.tex,
          Data\Weapons\Common\Icons\LeverRifle_scope.tex,
          Data\Weapons\Common\Icons\LeverRifle_thermal_glow.tex,
          Data\Weapons\Common\Icons\LeverRifle_thermal.tex;
          
  MorphFilename[AIM]    = Data\Hunters\Common\Anim\weapon_aim.mtg;
  MorphFilename[SHOOT]  = Data\Hunters\Common\Anim\weapon_shoot.mtg;
  MorphFilename[RELOAD] = Data\Hunters\Common\Anim\reload.mtg;
}

//weapon variables
Weapon {

  //spread angle (will be added to the ammunition spread angle)
  SpreadAngle  = 0.01;

  //max bullets  
  MaxLoad = 5;

  //scope support helper for this weapon 
  ScopeHelper = @scope;

  //scope support for this weapon 
  ScopeSupport = Data\Weapons\Common\Models\Support.j3d;

  //skins with minimal weapon bonus to use
  Skins = Data\Weapons\Common\Models\Tex\leverif[dif3].tex = 0   50,
          Data\Weapons\Common\Models\Tex\leverif[dif2].tex = 0   50,
          Data\Weapons\Common\Models\Tex\leverif[dif1].tex = 0   60,
          Data\Weapons\Common\Models\Tex\leverif[difg].tex = 100 85;

  //skins icons
  SkinIcons = Data\Weapons\Common\Icons\m_silver.tex,
              Data\Weapons\Common\Icons\m_black.tex,
              Data\Weapons\Common\Icons\m_yellow.tex,
              Data\Weapons\Common\Icons\m_gold.tex;

  //using detail and camo texture
  UseDetailTexture = TRUE;
  UseCamoTexture   = TRUE;

  //weapon weight [1..3]
  Weight = 2;
}

//called when user wants to fire
ISL[USE] {

    IfNotVarGoto(CURRENT_BULLETS, DRY_SHOT);

    PlayBones(shoot.skl, 30);

    LinkObject(Data\Weapons\Common\ShootFX\RifleSmoke.par, @smoke, , FALSE, FALSE);
    PlaySound(SOUND_SHOOT);

    Event(FIRE);
    Event(USE_BULLET);

    //open/close lever    
    WaitBonesFrame(21);
    PlaySound(Data\Weapons\Common\Sounds\LeverCock.wav);
    PlaySyncJ3D(open, 21, 27);
    WaitBonesFrame(27);
    PlaySyncJ3D(open, 27, 34, TRUE);

    //eject bullet
    WaitBonesFrame(28);
    EjectObject(MODEL_BULLET_EJECT, @bullet_dir, @bullet_dir, 20, 0.5, 30, 1.4, TRUE);

    WaitBonesFrame(50);
    EndScript();
  
  DRY_SHOT:
  
    PlaySound(Data\Weapons\Common\Sounds\DryShot.wav);
    Event(DRY_FIRE);
    EndScript();
}

//called when reloading the weapon
ISL[RELOAD] {

    IfVarsEqualGoto(CURRENT_BULLETS, MAX_BULLETS, FULL_OF_BULLETS);
    
    PlayBones(reload.skl, 30);
   
    WaitBonesFrame(20);

  REPLAY_BULLET:

    //get the bullet
    LinkObject(MODEL_BULLET, @bullet, , TRUE);

    //drop the bullet
    WaitBonesFrame(31);
    PlaySound(Data\Weapons\Common\Sounds\InsertBullet.wav);
    UnlinkObject(MODEL_BULLET, TRUE);
    Event(NEW_BULLET);
    Increase(CURRENT_BULLETS);

    //wait end of loop
    WaitBonesFrame(43);
    IfVarsEqualGoto(CURRENT_BULLETS, MAX_BULLETS, SWITCH_LEVER);
    
    SetBonesFrame(20);
    Goto(REPLAY_BULLET);

  SWITCH_LEVER:

    WaitBonesFrame(54);
    PlaySound(Data\Weapons\Common\Sounds\LeverCock.wav);
    PlaySyncJ3D(open, 54, 60);
    WaitBonesFrame(60);
    PlaySyncJ3D(open, 60, 67, TRUE);

    WaitBonesFrame(89);
    
  FULL_OF_BULLETS:

    EndScript();
}
